"reaction rate list, some depends on temperature."
function react_rate(T::Unitful.AbsoluteScaleTemperature)
    T = ustrip(u"K", T)
    kf = (2.33e-8/T)
    K = 0.74exp(401.4/T)
    kr = kf/K
    k1 = 2.0e-12       #   quench by water vapor
    k2 = 3.8e-11       #   quench by residual I‚ÇÇ
    k3 = 4.0e-10       #   ground state HFR
    k4 = 1.0e-10       #   excited state HFR
    kf, kr, k1, k2, k3, k4 = (kf, kr, k1, k2, k3, k4) .* u"cm^3/s"
    react = (;kf, kr, k1, k2, k3, k4)
    return react
end

function flowrate_0(fr_inlet; diss_I‚ÇÇ, utl_Cl‚ÇÇ)
    @unpack Cl‚ÇÇ, I‚ÇÇ, He_P, He_S, H‚ÇÇO = fr_inlet
    He = He_P + He_S
    O‚ÇÇ = Cl‚ÇÇ * utl_Cl‚ÇÇ
    I = 2 * I‚ÇÇ * diss_I‚ÇÇ
    Cl‚ÇÇ = Cl‚ÇÇ * (1 - utl_Cl‚ÇÇ)
    I‚ÇÇ = I‚ÇÇ * (1 - diss_I‚ÇÇ)
    flowrate0 = (;O‚ÇÇ, I, I‚ÇÇ, H‚ÇÇO, Cl‚ÇÇ, He)
    return flowrate0
end

function gas_mix(flowrate)
    fr_tot = sum(flowrate)
    gas_df = DataFrame(
        Name = ["O‚ÇÇ", "I", "I‚ÇÇ", "H‚ÇÇO", "Cl‚ÇÇ", "He"],
        Œ≥ = [7//5, 5//3, 7//5, 1.33, 7//5, 1.66],
        M = [31.9988, 126.90447, 253.80894, 18.0153, 70.906, 4.002602] * u"g/mol",
        Œ≥‚Çö = [5.7, 0, 0, 0, 0, 4.1] * u"MHz/Torr",
        flowrate = [values(flowrate)...],
        fraction = ustrip.(NoUnits, [values(flowrate)...] ./ fr_tot)
        )
    return gas_df
end

function coe_mix(gas_df::DataFrame)
    fraction = gas_df.fraction
    Œ≥_list = gas_df.Œ≥
    molar_mass = gas_df.M
    Œ≥_mix = sum(@. fraction * Œ≥_list / (Œ≥_list - 1)) / sum(@. fraction / (Œ≥_list - 1))
    M_mix = sum(fraction .* molar_mass)
    Œ≥‚Çö_mix = sum(fraction .* gas_df.Œ≥‚Çö)
    return Œ≥_mix, M_mix, Œ≥‚Çö_mix
end

function flowrate2density(flowrate, V, A)
    k = keys(flowrate)
    v = [uconvert(u"cm^-3", fr / V / A * ùëÅ) for fr in flowrate]
    density = (; zip(k, v)...)
    return density
end

function gain2yield(g34, density, œÉ34g, react)
    @unpack O‚ÇÇ, I, I‚ÇÇ, H‚ÇÇO = density
    @unpack kf, kr, k1, k2 = react
    yield0 = (2g34 + I * œÉ34g) * (H‚ÇÇO * k1 + I‚ÇÇ * k2 + O‚ÇÇ * kr) / O‚ÇÇ / 
         (I * œÉ34g * (2kf + kr) - 2g34 * (kf - kr))
    return uconvert(NoUnits, yield0)
end

function initial_flow(X, Nx::Int, V, yield_0, g34_0, œÉ34g, density, react)
    @unpack O‚ÇÇ, I, I‚ÇÇ, H‚ÇÇO = density
    @unpack kf, kr, k1, k2 = react
    
    dt = X / Nx / V

    O2g_0 = O‚ÇÇ * (1 - yield_0)
    O2e_0 = O‚ÇÇ * yield_0
    Ig_0 = 2//3 * (I - g34_0 / œÉ34g)
    Ie_0 = I - Ig_0

    O2g = Vector{typeof(O2g_0)}(undef, Nx)
    O2e = similar(O2g)
    Ig_t = similar(O2g)
    Ie_t = similar(O2g)

    O2g[1] = O2g_0
    O2e[1] = O2e_0
    Ig_t[1] = Ig_0
    Ie_t[1] = Ie_0

    for i in 1:Nx-1
        transfer = (kf * Ig_t[i] * O2e[i] - kr * Ie_t[i] * O2g[i]) * dt
        quench = (k1 * Ie_t[i] * H‚ÇÇO + k2 * Ie_t[i] * I‚ÇÇ) * dt
        O2g[i+1] = O2g[i] + transfer
        O2e[i+1] = O‚ÇÇ - O2g[i+1]
        Ig_t[i+1] = Ig_t[i] + (-transfer + quench)
        Ie_t[i+1] = I - Ig_t[i+1]
    end

    Fu = 3:-1:2
    Fl = 4:-1:1
    Ie = Matrix{typeof(O2g_0)}(undef, Nx, length(Fu))
    Ig = Matrix{typeof(O2g_0)}(undef, Nx, length(Fl))
    for i in 1:length(Fu)
        Ie[:, i] .= Ie_t * (Fu[i] * 2 + 1) / 12
    end
    for i in 1:length(Fl)
        Ig[:, i] .= Ig_t * (Fl[i] * 2 + 1) / 24
    end
    return O2g, O2e, Ig, Ie
end

function initial_fs(Ny::Int, Nz::Int, O‚ÇÇg, O‚ÇÇe, Ie3, Ie2, Ig4, Ig2, Ig31)
    O‚ÇÇg, O‚ÇÇe, Ie3, Ie2, Ig4, Ig2, Ig31 = 
    map((O‚ÇÇg, O‚ÇÇe, Ie3, Ie2, Ig4, Ig2, Ig31)) do d
        d = repeat(d, 1, Ny, Nz)
    end
    (;O‚ÇÇg, O‚ÇÇe, Ie3, Ie2, Ig4, Ig2, Ig31)
end
